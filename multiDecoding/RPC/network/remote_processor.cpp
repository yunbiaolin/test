//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `remote_processor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <remote_processor.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_remote_DetectorInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::DetectorInterface"
};
const ::std::string iceC_remote_DetectorInterface_ops[] =
{
    "detect",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_remote_DetectorInterface_detect_name = "detect";

const ::std::string iceC_remote_ClassifierInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::ClassifierInterface"
};
const ::std::string iceC_remote_ClassifierInterface_ops[] =
{
    "classify",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_remote_ClassifierInterface_classify_name = "classify";

const ::std::string iceC_remote_MatchingInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::MatchingInterface"
};
const ::std::string iceC_remote_MatchingInterface_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "match"
};
const ::std::string iceC_remote_MatchingInterface_match_name = "match";

}

bool
remote::DetectorInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_DetectorInterface_ids, iceC_remote_DetectorInterface_ids + 2, s);
}

::std::vector<::std::string>
remote::DetectorInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_remote_DetectorInterface_ids[0], &iceC_remote_DetectorInterface_ids[2]);
}

::std::string
remote::DetectorInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::DetectorInterface::ice_staticId()
{
    static const ::std::string typeId = "::remote::DetectorInterface";
    return typeId;
}

/// \cond INTERNAL
bool
remote::DetectorInterface::_iceD_detect(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_streamId;
    long long int iceP_imageTimestamp;
    int iceP_imageWidth;
    int iceP_imageHeight;
    ::Ice::Byte iceP_imageQality;
    ::Ice::Byte iceP_imageColor;
    ::Ice::Byte iceP_imageFormat;
    short iceP_totalPieces;
    int iceP_imageSize;
    short iceP_currPieceId;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_imagePiece;
    int iceP_pieceSize;
    istr->readAll(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize);
    inS.endReadParams();
    this->detect(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, ::std::move(iceP_imagePiece), iceP_pieceSize, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
remote::DetectorInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_DetectorInterface_ops, iceC_remote_DetectorInterface_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_DetectorInterface_ops)
    {
        case 0:
        {
            return _iceD_detect(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
remote::ClassifierInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_ClassifierInterface_ids, iceC_remote_ClassifierInterface_ids + 2, s);
}

::std::vector<::std::string>
remote::ClassifierInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_remote_ClassifierInterface_ids[0], &iceC_remote_ClassifierInterface_ids[2]);
}

::std::string
remote::ClassifierInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::ClassifierInterface::ice_staticId()
{
    static const ::std::string typeId = "::remote::ClassifierInterface";
    return typeId;
}

/// \cond INTERNAL
bool
remote::ClassifierInterface::_iceD_classify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_streamId;
    long long int iceP_imageTimestamp;
    int iceP_imageWidth;
    int iceP_imageHeight;
    ::Ice::Byte iceP_imageQuality;
    ::Ice::Byte iceP_imageColor;
    ::Ice::Byte iceP_imageFormat;
    short iceP_totalPieces;
    int iceP_imageSize;
    short iceP_currPieceId;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_imagePiece;
    int iceP_pieceSize;
    int iceP_top;
    int iceP_bottom;
    int iceP_left;
    int iceP_right;
    istr->readAll(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQuality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize, iceP_top, iceP_bottom, iceP_left, iceP_right);
    inS.endReadParams();
    this->classify(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQuality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, ::std::move(iceP_imagePiece), iceP_pieceSize, iceP_top, iceP_bottom, iceP_left, iceP_right, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
remote::ClassifierInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_ClassifierInterface_ops, iceC_remote_ClassifierInterface_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_ClassifierInterface_ops)
    {
        case 0:
        {
            return _iceD_classify(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
remote::MatchingInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_MatchingInterface_ids, iceC_remote_MatchingInterface_ids + 2, s);
}

::std::vector<::std::string>
remote::MatchingInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_remote_MatchingInterface_ids[0], &iceC_remote_MatchingInterface_ids[2]);
}

::std::string
remote::MatchingInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::MatchingInterface::ice_staticId()
{
    static const ::std::string typeId = "::remote::MatchingInterface";
    return typeId;
}

/// \cond INTERNAL
bool
remote::MatchingInterface::_iceD_match(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_streamId;
    long long int iceP_timestamp;
    int iceP_top;
    int iceP_bottom;
    int iceP_left;
    int iceP_right;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_featurePiece;
    istr->readAll(iceP_streamId, iceP_timestamp, iceP_top, iceP_bottom, iceP_left, iceP_right, iceP_featurePiece);
    inS.endReadParams();
    this->match(iceP_streamId, iceP_timestamp, iceP_top, iceP_bottom, iceP_left, iceP_right, ::std::move(iceP_featurePiece), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
remote::MatchingInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_MatchingInterface_ops, iceC_remote_MatchingInterface_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_MatchingInterface_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_match(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
remote::DetectorInterfacePrx::_iceI_detect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_streamId, long long int iceP_imageTimestamp, int iceP_imageWidth, int iceP_imageHeight, ::Ice::Byte iceP_imageQality, ::Ice::Byte iceP_imageColor, ::Ice::Byte iceP_imageFormat, short iceP_totalPieces, int iceP_imageSize, short iceP_currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_imagePiece, int iceP_pieceSize, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_remote_DetectorInterface_detect_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
remote::DetectorInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<DetectorInterfacePrx>();
}
/// \endcond

const ::std::string&
remote::DetectorInterfacePrx::ice_staticId()
{
    return DetectorInterface::ice_staticId();
}

/// \cond INTERNAL
void
remote::ClassifierInterfacePrx::_iceI_classify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_streamId, long long int iceP_imageTimestamp, int iceP_imageWidth, int iceP_imageHeight, ::Ice::Byte iceP_imageQuality, ::Ice::Byte iceP_imageColor, ::Ice::Byte iceP_imageFormat, short iceP_totalPieces, int iceP_imageSize, short iceP_currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_imagePiece, int iceP_pieceSize, int iceP_top, int iceP_bottom, int iceP_left, int iceP_right, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_remote_ClassifierInterface_classify_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQuality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize, iceP_top, iceP_bottom, iceP_left, iceP_right);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
remote::ClassifierInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<ClassifierInterfacePrx>();
}
/// \endcond

const ::std::string&
remote::ClassifierInterfacePrx::ice_staticId()
{
    return ClassifierInterface::ice_staticId();
}

/// \cond INTERNAL
void
remote::MatchingInterfacePrx::_iceI_match(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_streamId, long long int iceP_timestamp, int iceP_top, int iceP_bottom, int iceP_left, int iceP_right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_featurePiece, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_remote_MatchingInterface_match_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_streamId, iceP_timestamp, iceP_top, iceP_bottom, iceP_left, iceP_right, iceP_featurePiece);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
remote::MatchingInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<MatchingInterfacePrx>();
}
/// \endcond

const ::std::string&
remote::MatchingInterfacePrx::ice_staticId()
{
    return MatchingInterface::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_remote_DetectorInterface_detect_name = "detect";

const ::std::string iceC_remote_ClassifierInterface_classify_name = "classify";

const ::std::string iceC_remote_MatchingInterface_match_name = "match";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::remote::upCast(DetectorInterface* p) { return p; }

void
::IceProxy::remote::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< DetectorInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new DetectorInterface;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::remote::DetectorInterface::_iceI_begin_detect(::Ice::Int iceP_streamId, ::Ice::Long iceP_imageTimestamp, ::Ice::Int iceP_imageWidth, ::Ice::Int iceP_imageHeight, ::Ice::Byte iceP_imageQality, ::Ice::Byte iceP_imageColor, ::Ice::Byte iceP_imageFormat, ::Ice::Short iceP_totalPieces, ::Ice::Int iceP_imageSize, ::Ice::Short iceP_currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_imagePiece, ::Ice::Int iceP_pieceSize, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_remote_DetectorInterface_detect_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_remote_DetectorInterface_detect_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_streamId);
        ostr->write(iceP_imageTimestamp);
        ostr->write(iceP_imageWidth);
        ostr->write(iceP_imageHeight);
        ostr->write(iceP_imageQality);
        ostr->write(iceP_imageColor);
        ostr->write(iceP_imageFormat);
        ostr->write(iceP_totalPieces);
        ostr->write(iceP_imageSize);
        ostr->write(iceP_currPieceId);
        ostr->write(iceP_imagePiece);
        ostr->write(iceP_pieceSize);
        result->endWriteParams();
        result->invoke(iceC_remote_DetectorInterface_detect_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::remote::DetectorInterface::end_detect(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_remote_DetectorInterface_detect_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::remote::DetectorInterface::_newInstance() const
{
    return new DetectorInterface;
}
/// \endcond

const ::std::string&
IceProxy::remote::DetectorInterface::ice_staticId()
{
    return ::remote::DetectorInterface::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::remote::upCast(ClassifierInterface* p) { return p; }

void
::IceProxy::remote::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ClassifierInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ClassifierInterface;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::remote::ClassifierInterface::_iceI_begin_classify(::Ice::Int iceP_streamId, ::Ice::Long iceP_imageTimestamp, ::Ice::Int iceP_imageWidth, ::Ice::Int iceP_imageHeight, ::Ice::Byte iceP_imageQuality, ::Ice::Byte iceP_imageColor, ::Ice::Byte iceP_imageFormat, ::Ice::Short iceP_totalPieces, ::Ice::Int iceP_imageSize, ::Ice::Short iceP_currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_imagePiece, ::Ice::Int iceP_pieceSize, ::Ice::Int iceP_top, ::Ice::Int iceP_bottom, ::Ice::Int iceP_left, ::Ice::Int iceP_right, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_remote_ClassifierInterface_classify_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_remote_ClassifierInterface_classify_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_streamId);
        ostr->write(iceP_imageTimestamp);
        ostr->write(iceP_imageWidth);
        ostr->write(iceP_imageHeight);
        ostr->write(iceP_imageQuality);
        ostr->write(iceP_imageColor);
        ostr->write(iceP_imageFormat);
        ostr->write(iceP_totalPieces);
        ostr->write(iceP_imageSize);
        ostr->write(iceP_currPieceId);
        ostr->write(iceP_imagePiece);
        ostr->write(iceP_pieceSize);
        ostr->write(iceP_top);
        ostr->write(iceP_bottom);
        ostr->write(iceP_left);
        ostr->write(iceP_right);
        result->endWriteParams();
        result->invoke(iceC_remote_ClassifierInterface_classify_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::remote::ClassifierInterface::end_classify(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_remote_ClassifierInterface_classify_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::remote::ClassifierInterface::_newInstance() const
{
    return new ClassifierInterface;
}
/// \endcond

const ::std::string&
IceProxy::remote::ClassifierInterface::ice_staticId()
{
    return ::remote::ClassifierInterface::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::remote::upCast(MatchingInterface* p) { return p; }

void
::IceProxy::remote::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MatchingInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MatchingInterface;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::remote::MatchingInterface::_iceI_begin_match(::Ice::Int iceP_streamId, ::Ice::Long iceP_timestamp, ::Ice::Int iceP_top, ::Ice::Int iceP_bottom, ::Ice::Int iceP_left, ::Ice::Int iceP_right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& iceP_featurePiece, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_remote_MatchingInterface_match_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_remote_MatchingInterface_match_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_streamId);
        ostr->write(iceP_timestamp);
        ostr->write(iceP_top);
        ostr->write(iceP_bottom);
        ostr->write(iceP_left);
        ostr->write(iceP_right);
        ostr->write(iceP_featurePiece);
        result->endWriteParams();
        result->invoke(iceC_remote_MatchingInterface_match_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::remote::MatchingInterface::end_match(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_remote_MatchingInterface_match_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::remote::MatchingInterface::_newInstance() const
{
    return new MatchingInterface;
}
/// \endcond

const ::std::string&
IceProxy::remote::MatchingInterface::ice_staticId()
{
    return ::remote::MatchingInterface::ice_staticId();
}

remote::DetectorInterface::~DetectorInterface()
{
}

/// \cond INTERNAL
::Ice::Object* remote::upCast(DetectorInterface* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_remote_DetectorInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::DetectorInterface"
};

}

bool
remote::DetectorInterface::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_DetectorInterface_ids, iceC_remote_DetectorInterface_ids + 2, s);
}

::std::vector< ::std::string>
remote::DetectorInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_remote_DetectorInterface_ids[0], &iceC_remote_DetectorInterface_ids[2]);
}

const ::std::string&
remote::DetectorInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::DetectorInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::remote::DetectorInterface";
    return typeId;
#else
    return iceC_remote_DetectorInterface_ids[1];
#endif
}

/// \cond INTERNAL
bool
remote::DetectorInterface::_iceD_detect(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_streamId;
    ::Ice::Long iceP_imageTimestamp;
    ::Ice::Int iceP_imageWidth;
    ::Ice::Int iceP_imageHeight;
    ::Ice::Byte iceP_imageQality;
    ::Ice::Byte iceP_imageColor;
    ::Ice::Byte iceP_imageFormat;
    ::Ice::Short iceP_totalPieces;
    ::Ice::Int iceP_imageSize;
    ::Ice::Short iceP_currPieceId;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_imagePiece;
    ::Ice::Int iceP_pieceSize;
    istr->read(iceP_streamId);
    istr->read(iceP_imageTimestamp);
    istr->read(iceP_imageWidth);
    istr->read(iceP_imageHeight);
    istr->read(iceP_imageQality);
    istr->read(iceP_imageColor);
    istr->read(iceP_imageFormat);
    istr->read(iceP_totalPieces);
    istr->read(iceP_imageSize);
    istr->read(iceP_currPieceId);
    istr->read(iceP_imagePiece);
    istr->read(iceP_pieceSize);
    inS.endReadParams();
    this->detect(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_remote_DetectorInterface_all[] =
{
    "detect",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
remote::DetectorInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_DetectorInterface_all, iceC_remote_DetectorInterface_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_DetectorInterface_all)
    {
        case 0:
        {
            return _iceD_detect(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
remote::DetectorInterface::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< DetectorInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
remote::DetectorInterface::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DetectorInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
remote::_icePatchObjectPtr(DetectorInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DetectorInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(DetectorInterface::ice_staticId(), v);
    }
}
/// \endcond

remote::ClassifierInterface::~ClassifierInterface()
{
}

/// \cond INTERNAL
::Ice::Object* remote::upCast(ClassifierInterface* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_remote_ClassifierInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::ClassifierInterface"
};

}

bool
remote::ClassifierInterface::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_ClassifierInterface_ids, iceC_remote_ClassifierInterface_ids + 2, s);
}

::std::vector< ::std::string>
remote::ClassifierInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_remote_ClassifierInterface_ids[0], &iceC_remote_ClassifierInterface_ids[2]);
}

const ::std::string&
remote::ClassifierInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::ClassifierInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::remote::ClassifierInterface";
    return typeId;
#else
    return iceC_remote_ClassifierInterface_ids[1];
#endif
}

/// \cond INTERNAL
bool
remote::ClassifierInterface::_iceD_classify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_streamId;
    ::Ice::Long iceP_imageTimestamp;
    ::Ice::Int iceP_imageWidth;
    ::Ice::Int iceP_imageHeight;
    ::Ice::Byte iceP_imageQuality;
    ::Ice::Byte iceP_imageColor;
    ::Ice::Byte iceP_imageFormat;
    ::Ice::Short iceP_totalPieces;
    ::Ice::Int iceP_imageSize;
    ::Ice::Short iceP_currPieceId;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_imagePiece;
    ::Ice::Int iceP_pieceSize;
    ::Ice::Int iceP_top;
    ::Ice::Int iceP_bottom;
    ::Ice::Int iceP_left;
    ::Ice::Int iceP_right;
    istr->read(iceP_streamId);
    istr->read(iceP_imageTimestamp);
    istr->read(iceP_imageWidth);
    istr->read(iceP_imageHeight);
    istr->read(iceP_imageQuality);
    istr->read(iceP_imageColor);
    istr->read(iceP_imageFormat);
    istr->read(iceP_totalPieces);
    istr->read(iceP_imageSize);
    istr->read(iceP_currPieceId);
    istr->read(iceP_imagePiece);
    istr->read(iceP_pieceSize);
    istr->read(iceP_top);
    istr->read(iceP_bottom);
    istr->read(iceP_left);
    istr->read(iceP_right);
    inS.endReadParams();
    this->classify(iceP_streamId, iceP_imageTimestamp, iceP_imageWidth, iceP_imageHeight, iceP_imageQuality, iceP_imageColor, iceP_imageFormat, iceP_totalPieces, iceP_imageSize, iceP_currPieceId, iceP_imagePiece, iceP_pieceSize, iceP_top, iceP_bottom, iceP_left, iceP_right, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_remote_ClassifierInterface_all[] =
{
    "classify",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
remote::ClassifierInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_ClassifierInterface_all, iceC_remote_ClassifierInterface_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_ClassifierInterface_all)
    {
        case 0:
        {
            return _iceD_classify(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
remote::ClassifierInterface::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ClassifierInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
remote::ClassifierInterface::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ClassifierInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
remote::_icePatchObjectPtr(ClassifierInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ClassifierInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ClassifierInterface::ice_staticId(), v);
    }
}
/// \endcond

remote::MatchingInterface::~MatchingInterface()
{
}

/// \cond INTERNAL
::Ice::Object* remote::upCast(MatchingInterface* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_remote_MatchingInterface_ids[2] =
{
    "::Ice::Object",
    "::remote::MatchingInterface"
};

}

bool
remote::MatchingInterface::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_remote_MatchingInterface_ids, iceC_remote_MatchingInterface_ids + 2, s);
}

::std::vector< ::std::string>
remote::MatchingInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_remote_MatchingInterface_ids[0], &iceC_remote_MatchingInterface_ids[2]);
}

const ::std::string&
remote::MatchingInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
remote::MatchingInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::remote::MatchingInterface";
    return typeId;
#else
    return iceC_remote_MatchingInterface_ids[1];
#endif
}

/// \cond INTERNAL
bool
remote::MatchingInterface::_iceD_match(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_streamId;
    ::Ice::Long iceP_timestamp;
    ::Ice::Int iceP_top;
    ::Ice::Int iceP_bottom;
    ::Ice::Int iceP_left;
    ::Ice::Int iceP_right;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> iceP_featurePiece;
    istr->read(iceP_streamId);
    istr->read(iceP_timestamp);
    istr->read(iceP_top);
    istr->read(iceP_bottom);
    istr->read(iceP_left);
    istr->read(iceP_right);
    istr->read(iceP_featurePiece);
    inS.endReadParams();
    this->match(iceP_streamId, iceP_timestamp, iceP_top, iceP_bottom, iceP_left, iceP_right, iceP_featurePiece, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_remote_MatchingInterface_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "match"
};

}

/// \cond INTERNAL
bool
remote::MatchingInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_remote_MatchingInterface_all, iceC_remote_MatchingInterface_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_remote_MatchingInterface_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_match(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
remote::MatchingInterface::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MatchingInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
remote::MatchingInterface::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MatchingInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
remote::_icePatchObjectPtr(MatchingInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MatchingInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MatchingInterface::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
