//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `remote_processor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __remote_processor_h__
#define __remote_processor_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace remote
{

class DetectorInterface;
class DetectorInterfacePrx;
class ClassifierInterface;
class ClassifierInterfacePrx;
class MatchingInterface;
class MatchingInterfacePrx;

}

namespace remote
{

using ByteSeq = ::std::vector<::Ice::Byte>;

}

namespace remote
{

class DetectorInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = DetectorInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void detect(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> imagePiece, int pieceSize, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_detect(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ClassifierInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = ClassifierInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void classify(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> imagePiece, int pieceSize, int top, int bottom, int left, int right, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_classify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class MatchingInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = MatchingInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void match(int streamId, long long int timestamp, int top, int bottom, int left, int right, ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> featurePiece, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_match(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace remote
{

class DetectorInterfacePrx : public virtual ::Ice::Proxy<DetectorInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void detect(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &DetectorInterfacePrx::_iceI_detect, streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto detectAsync(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &DetectorInterfacePrx::_iceI_detect, streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context);
    }

    ::std::function<void()>
    detectAsync(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &remote::DetectorInterfacePrx::_iceI_detect, streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context);
    }

    /// \cond INTERNAL
    void _iceI_detect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, long long int, int, int, ::Ice::Byte, ::Ice::Byte, ::Ice::Byte, short, int, short, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    DetectorInterfacePrx() = default;
    friend ::std::shared_ptr<DetectorInterfacePrx> IceInternal::createProxy<DetectorInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ClassifierInterfacePrx : public virtual ::Ice::Proxy<ClassifierInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void classify(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize, int top, int bottom, int left, int right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ClassifierInterfacePrx::_iceI_classify, streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto classifyAsync(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize, int top, int bottom, int left, int right, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ClassifierInterfacePrx::_iceI_classify, streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context);
    }

    ::std::function<void()>
    classifyAsync(int streamId, long long int imageTimestamp, int imageWidth, int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, short totalPieces, int imageSize, short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, int pieceSize, int top, int bottom, int left, int right,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &remote::ClassifierInterfacePrx::_iceI_classify, streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context);
    }

    /// \cond INTERNAL
    void _iceI_classify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, long long int, int, int, ::Ice::Byte, ::Ice::Byte, ::Ice::Byte, short, int, short, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, int, int, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ClassifierInterfacePrx() = default;
    friend ::std::shared_ptr<ClassifierInterfacePrx> IceInternal::createProxy<ClassifierInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class MatchingInterfacePrx : public virtual ::Ice::Proxy<MatchingInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void match(int streamId, long long int timestamp, int top, int bottom, int left, int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MatchingInterfacePrx::_iceI_match, streamId, timestamp, top, bottom, left, right, featurePiece, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto matchAsync(int streamId, long long int timestamp, int top, int bottom, int left, int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MatchingInterfacePrx::_iceI_match, streamId, timestamp, top, bottom, left, right, featurePiece, context);
    }

    ::std::function<void()>
    matchAsync(int streamId, long long int timestamp, int top, int bottom, int left, int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &remote::MatchingInterfacePrx::_iceI_match, streamId, timestamp, top, bottom, left, right, featurePiece, context);
    }

    /// \cond INTERNAL
    void _iceI_match(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, long long int, int, int, int, int, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MatchingInterfacePrx() = default;
    friend ::std::shared_ptr<MatchingInterfacePrx> IceInternal::createProxy<MatchingInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace remote
{

using DetectorInterfacePtr = ::std::shared_ptr<DetectorInterface>;
using DetectorInterfacePrxPtr = ::std::shared_ptr<DetectorInterfacePrx>;

using ClassifierInterfacePtr = ::std::shared_ptr<ClassifierInterface>;
using ClassifierInterfacePrxPtr = ::std::shared_ptr<ClassifierInterfacePrx>;

using MatchingInterfacePtr = ::std::shared_ptr<MatchingInterface>;
using MatchingInterfacePrxPtr = ::std::shared_ptr<MatchingInterfacePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace remote
{

class DetectorInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< DetectorInterface>&);
::IceProxy::Ice::Object* upCast(DetectorInterface*);
/// \endcond

class ClassifierInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ClassifierInterface>&);
::IceProxy::Ice::Object* upCast(ClassifierInterface*);
/// \endcond

class MatchingInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MatchingInterface>&);
::IceProxy::Ice::Object* upCast(MatchingInterface*);
/// \endcond

}

}

namespace remote
{

class DetectorInterface;
/// \cond INTERNAL
::Ice::Object* upCast(DetectorInterface*);
/// \endcond
typedef ::IceInternal::Handle< DetectorInterface> DetectorInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::remote::DetectorInterface> DetectorInterfacePrx;
typedef DetectorInterfacePrx DetectorInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(DetectorInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ClassifierInterface;
/// \cond INTERNAL
::Ice::Object* upCast(ClassifierInterface*);
/// \endcond
typedef ::IceInternal::Handle< ClassifierInterface> ClassifierInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::remote::ClassifierInterface> ClassifierInterfacePrx;
typedef ClassifierInterfacePrx ClassifierInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ClassifierInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class MatchingInterface;
/// \cond INTERNAL
::Ice::Object* upCast(MatchingInterface*);
/// \endcond
typedef ::IceInternal::Handle< MatchingInterface> MatchingInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::remote::MatchingInterface> MatchingInterfacePrx;
typedef MatchingInterfacePrx MatchingInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MatchingInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace remote
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

namespace remote
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::remote::DetectorInterface::begin_detect.
 * Create a wrapper instance by calling ::remote::newCallback_DetectorInterface_detect.
 */
class Callback_DetectorInterface_detect_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorInterface_detect_Base> Callback_DetectorInterface_detectPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::remote::ClassifierInterface::begin_classify.
 * Create a wrapper instance by calling ::remote::newCallback_ClassifierInterface_classify.
 */
class Callback_ClassifierInterface_classify_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClassifierInterface_classify_Base> Callback_ClassifierInterface_classifyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::remote::MatchingInterface::begin_match.
 * Create a wrapper instance by calling ::remote::newCallback_MatchingInterface_match.
 */
class Callback_MatchingInterface_match_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MatchingInterface_match_Base> Callback_MatchingInterface_matchPtr;

}

namespace IceProxy
{

namespace remote
{

class DetectorInterface : public virtual ::Ice::Proxy<DetectorInterface, ::IceProxy::Ice::Object>
{
public:

    void detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_detect(_iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::remote::Callback_DetectorInterface_detectPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::Context& context, const ::remote::Callback_DetectorInterface_detectPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_detect(streamId, imageTimestamp, imageWidth, imageHeight, imageQality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, context, cb, cookie);
    }

    void end_detect(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_detect(::Ice::Int, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Byte, ::Ice::Byte, ::Ice::Byte, ::Ice::Short, ::Ice::Int, ::Ice::Short, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ClassifierInterface : public virtual ::Ice::Proxy<ClassifierInterface, ::IceProxy::Ice::Object>
{
public:

    void classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_classify(_iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::remote::Callback_ClassifierInterface_classifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::Context& context, const ::remote::Callback_ClassifierInterface_classifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_classify(streamId, imageTimestamp, imageWidth, imageHeight, imageQuality, imageColor, imageFormat, totalPieces, imageSize, currPieceId, imagePiece, pieceSize, top, bottom, left, right, context, cb, cookie);
    }

    void end_classify(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_classify(::Ice::Int, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Byte, ::Ice::Byte, ::Ice::Byte, ::Ice::Short, ::Ice::Int, ::Ice::Short, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class MatchingInterface : public virtual ::Ice::Proxy<MatchingInterface, ::IceProxy::Ice::Object>
{
public:

    void match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_match(_iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::remote::Callback_MatchingInterface_matchPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Context& context, const ::remote::Callback_MatchingInterface_matchPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_match(streamId, timestamp, top, bottom, left, right, featurePiece, context, cb, cookie);
    }

    void end_match(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_match(::Ice::Int, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace remote
{

class DetectorInterface : public virtual ::Ice::Object
{
public:

    typedef DetectorInterfacePrx ProxyType;
    typedef DetectorInterfacePtr PointerType;

    virtual ~DetectorInterface();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void detect(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_detect(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const DetectorInterface& lhs, const DetectorInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DetectorInterface& lhs, const DetectorInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ClassifierInterface : public virtual ::Ice::Object
{
public:

    typedef ClassifierInterfacePrx ProxyType;
    typedef ClassifierInterfacePtr PointerType;

    virtual ~ClassifierInterface();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void classify(::Ice::Int streamId, ::Ice::Long imageTimestamp, ::Ice::Int imageWidth, ::Ice::Int imageHeight, ::Ice::Byte imageQuality, ::Ice::Byte imageColor, ::Ice::Byte imageFormat, ::Ice::Short totalPieces, ::Ice::Int imageSize, ::Ice::Short currPieceId, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& imagePiece, ::Ice::Int pieceSize, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_classify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ClassifierInterface& lhs, const ClassifierInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ClassifierInterface& lhs, const ClassifierInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class MatchingInterface : public virtual ::Ice::Object
{
public:

    typedef MatchingInterfacePrx ProxyType;
    typedef MatchingInterfacePtr PointerType;

    virtual ~MatchingInterface();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void match(::Ice::Int streamId, ::Ice::Long timestamp, ::Ice::Int top, ::Ice::Int bottom, ::Ice::Int left, ::Ice::Int right, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& featurePiece, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_match(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const MatchingInterface& lhs, const MatchingInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MatchingInterface& lhs, const MatchingInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace remote
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::remote::DetectorInterface::begin_detect.
 * Create a wrapper instance by calling ::remote::newCallback_DetectorInterface_detect.
 */
template<class T>
class CallbackNC_DetectorInterface_detect : public Callback_DetectorInterface_detect_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorInterface_detect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorInterface_detect<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorInterface_detect<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorInterface_detect<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorInterface_detect<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::remote::DetectorInterface::begin_detect.
 * Create a wrapper instance by calling ::remote::newCallback_DetectorInterface_detect.
 */
template<class T, typename CT>
class Callback_DetectorInterface_detect : public Callback_DetectorInterface_detect_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorInterface_detect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T, typename CT> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorInterface_detect<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T, typename CT> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorInterface_detect<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T, typename CT> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorInterface_detect<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::DetectorInterface::begin_detect.
 */
template<class T, typename CT> Callback_DetectorInterface_detectPtr
newCallback_DetectorInterface_detect(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorInterface_detect<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::remote::ClassifierInterface::begin_classify.
 * Create a wrapper instance by calling ::remote::newCallback_ClassifierInterface_classify.
 */
template<class T>
class CallbackNC_ClassifierInterface_classify : public Callback_ClassifierInterface_classify_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ClassifierInterface_classify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClassifierInterface_classify<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClassifierInterface_classify<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClassifierInterface_classify<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClassifierInterface_classify<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::remote::ClassifierInterface::begin_classify.
 * Create a wrapper instance by calling ::remote::newCallback_ClassifierInterface_classify.
 */
template<class T, typename CT>
class Callback_ClassifierInterface_classify : public Callback_ClassifierInterface_classify_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ClassifierInterface_classify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T, typename CT> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClassifierInterface_classify<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T, typename CT> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClassifierInterface_classify<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T, typename CT> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClassifierInterface_classify<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::ClassifierInterface::begin_classify.
 */
template<class T, typename CT> Callback_ClassifierInterface_classifyPtr
newCallback_ClassifierInterface_classify(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClassifierInterface_classify<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::remote::MatchingInterface::begin_match.
 * Create a wrapper instance by calling ::remote::newCallback_MatchingInterface_match.
 */
template<class T>
class CallbackNC_MatchingInterface_match : public Callback_MatchingInterface_match_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MatchingInterface_match(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MatchingInterface_match<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MatchingInterface_match<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MatchingInterface_match<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MatchingInterface_match<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::remote::MatchingInterface::begin_match.
 * Create a wrapper instance by calling ::remote::newCallback_MatchingInterface_match.
 */
template<class T, typename CT>
class Callback_MatchingInterface_match : public Callback_MatchingInterface_match_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MatchingInterface_match(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T, typename CT> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MatchingInterface_match<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T, typename CT> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MatchingInterface_match<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T, typename CT> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MatchingInterface_match<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::remote::MatchingInterface::begin_match.
 */
template<class T, typename CT> Callback_MatchingInterface_matchPtr
newCallback_MatchingInterface_match(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MatchingInterface_match<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
